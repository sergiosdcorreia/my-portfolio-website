{"version":3,"sources":["assets/images/sergioCV.jpg","components/base/GlobalStyles.js","components/Layout/Container.js","components/Typography/Typography.js","components/Layout/Image.js","components/Layout/Header.js","components/Layout/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GlobalStyle","createGlobalStyle","_templateObject","Container","styled","div","Container_templateObject","Flexbox","_templateObject2","props","spaceBetween","alignCenter","Heading1","h1","Typography_templateObject","Heading2","h2","Typography_templateObject2","Image","img","Image_templateObject","HeaderStyles","Header_templateObject","InnerFlexbox","Header_templateObject2","Header","react_default","a","createElement","directionColumn","src","SergioImage","alt","Navigation","Navigation_templateObject","App","Layout_Header","GlobalStyles","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kjBCExC,IAceC,EAdKC,YAAHC,oSCAV,IAAMC,EAAYC,IAAOC,IAAVC,KAKTC,EAAUH,IAAOC,IAAVG,IAGG,SAAAC,GAAK,OACpBA,EAAMC,aAAe,gBAAkB,cAC1B,SAAAD,GAAK,OAAKA,EAAME,YAAc,SAAW,WACxC,SAAAF,GAAK,OAAKA,EAAME,YAAc,SAAW,oYCXxD,IAAMC,EAAWR,IAAOS,GAAVC,KAWRC,EAAWX,IAAOY,GAAVC,oNCXd,IAAMC,EAAQd,IAAOe,IAAVC,0UCMlB,IAAMC,EAAejB,IAAOC,IAAViB,KAMZC,EAAenB,IAAOC,IAAVmB,KAuBHC,EAhBA,WACX,OACIC,EAAAC,EAAAC,cAACP,EAAD,KACIK,EAAAC,EAAAC,cAACrB,EAAD,CAASG,cAAY,EAACC,aAAW,EAACkB,iBAAe,GAC7CH,EAAAC,EAAAC,cAACL,EAAD,KACIG,EAAAC,EAAAC,cAAChB,EAAD,cACUc,EAAAC,EAAAC,cAAA,wBAEVF,EAAAC,EAAAC,cAACb,EAAD,uCAEJW,EAAAC,EAAAC,cAACV,EAAD,CAAOY,IAAKC,IAAaC,IAAI,4NC7BtC,IAAMC,EAAa7B,IAAOC,IAAV6B,KCiBRC,MAZf,WACI,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAACzB,EAAD,KACIuB,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,SCDIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1da4a92c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sergioCV.e927f61e.jpg\";","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    @import url('https://fonts.googleapis.com/css?family=Lato:300,400,700,900&display=swap');\r\n    body {\r\n        background-color: #f9f9f9;\r\n        font-family: Lato, sans-serif;\r\n        font-size: 62.5%;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    *, *:after, *:before {\r\n        box-sizing: border-box;\r\n    }\r\n`;\r\nexport default GlobalStyle;\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const Flexbox = styled.div`\r\n    display: flex;\r\n\r\n    justify-content: ${props =>\r\n        props.spaceBetween ? 'space-between' : 'flex-start'};\r\n    align-content: ${props => (props.alignCenter ? 'center' : 'stretch')};\r\n    flex-direction: ${props => (props.alignCenter ? 'column' : 'row')};\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Heading1 = styled.h1`\r\n    font-size: 1.8rem;\r\n    font-weight: 600;\r\n    color: #515554;\r\n    margin: 0 0 0.6rem 0;\r\n\r\n    span {\r\n        font-weight: 300;\r\n    }\r\n`;\r\n\r\nexport const Heading2 = styled.h2`\r\n    font-size: 0.9rem;\r\n    font-weight: 400;\r\n    color: #515554;\r\n    margin: 0 0 0.5rem 0;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Image = styled.img`\r\n    width: 100%;\r\n    max-width: 310px;\r\n    height: 224px;\r\n    position: absolute;\r\n    left: 120px;\r\n    top: 0;\r\n    z-index: -20;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Flexbox } from './Container';\r\nimport { Heading1, Heading2 } from '../Typography/Typography';\r\nimport { Image } from './Image';\r\nimport SergioImage from '../../assets/images/sergioCV.jpg';\r\n\r\nconst HeaderStyles = styled.div`\r\n    height: 224px;\r\n    padding: 0 1rem;\r\n    position: relative;\r\n`;\r\n\r\nconst InnerFlexbox = styled.div`\r\n    height: 224px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Header = () => {\r\n    return (\r\n        <HeaderStyles>\r\n            <Flexbox spaceBetween alignCenter directionColumn>\r\n                <InnerFlexbox>\r\n                    <Heading1>\r\n                        SERGIO<span>CORREIA</span>\r\n                    </Heading1>\r\n                    <Heading2>Frontend Developer &amp; Designer</Heading2>\r\n                </InnerFlexbox>\r\n                <Image src={SergioImage} alt=\"Sergio Correia\" />\r\n            </Flexbox>\r\n        </HeaderStyles>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nexport const Navigation = styled.div`\r\n    height: 6vh;\r\n    box-shadow: 0px 6px 6px 0px rgba(0, 0, 0, 0.2);\r\n    position: relative;\r\n    top: 0;\r\n    z-index: 10;\r\n`;\r\n","import React from 'react';\r\nimport GlobalStyle from './components/base/GlobalStyles';\r\n\r\nimport { Container } from './components/Layout/Container';\r\nimport Header from './components/Layout/Header';\r\nimport { Navigation } from './components/Layout/Navigation';\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <Navigation />\r\n            <Container>\r\n                <Header />\r\n                <GlobalStyle />\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}